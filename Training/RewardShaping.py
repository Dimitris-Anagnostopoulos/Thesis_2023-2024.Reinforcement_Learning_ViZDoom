from Classes.ViZDoom_Gym import ViZDoom_Gym
import vizdoom as vzd


def basic(self: ViZDoom_Gym, game_variables: list) -> float:
    # Unpack the game variables.
    ammo, killcount = game_variables

    REWARD = 0

    SHOT = self.game.get_button(vzd.ATTACK) == 1
    GOT_KILL = killcount > self.killcount

    if GOT_KILL:
        REWARD += 100

        time_penalty = self.game.get_episode_time() - self.previous_time
        REWARD += max(10 - time_penalty, 0)

    if SHOT:
        REWARD += 1

    if SHOT and not GOT_KILL:
        REWARD -= 0.5

    self.previous_time = self.game.get_episode_time()
    self.killcount = killcount

    return REWARD


def deadly_corridor(self: ViZDoom_Gym, game_variables: list) -> float:
    """
    Custom reward function partially generated by ChatGPT-4o.

    :return: Extra reward according to the coefficients.
    """
    # Unpack the game variables.
    health, killcount, damage_taken = game_variables

    # Initializations.
    REWARD = 0

    DAMAGED = damage_taken > self.damage_taken
    GOT_KILL = killcount > self.killcount
    IS_ALIVE = health > 0

    current_distance = self.game.get_game_variable(vzd.POSITION_X) - 1312
    REWARD += (current_distance - self.previous_distance) * 50

    if GOT_KILL:
        REWARD += 100

    if DAMAGED:
        REWARD -= (damage_taken - self.damage_taken) * 0.2

    if IS_ALIVE:
        REWARD += 5

    REWARD -= 1

    # Update the values for the next step.
    self.previous_distance = current_distance
    self.damage_taken = damage_taken
    self.killcount = killcount

    return REWARD


def defend_the_center(self: ViZDoom_Gym, game_variables: list) -> float:
    # Unpack game variables.
    ammo, health, killcount, damage_taken = game_variables

    # Initial reward.
    REWARD = 0

    # Initialize useful variables.
    DAMAGED = damage_taken > self.prev_damage_taken
    GOT_KILL = killcount > self.prev_killcount
    SPENT_AMMO = ammo < self.prev_ammo

    # Reward the agent for getting kills.
    if GOT_KILL:
        REWARD += 50

    # Punish the agent for wasting ammo.
    if SPENT_AMMO and not GOT_KILL:
        REWARD -= 5

    # Punish the agent for getting damaged.
    if DAMAGED:
        REWARD -= (damage_taken - self.prev_damage_taken) * 1

    REWARD += 0.1

    # Update variables.
    self.prev_damage_taken = damage_taken
    self.prev_killcount = killcount
    self.prev_ammo = ammo

    return REWARD


def defend_the_line(self: ViZDoom_Gym, game_variables: list):
    # Unpack the game variables.
    ammo, health, killcount, damage_taken = game_variables

    # Initialize the Reward.
    REWARD = 0

    # Initialize useful variables.
    SHOT = self.game.get_button(vzd.ATTACK) == 1
    DAMAGED = damage_taken > self.damage_taken
    GOT_KILL = killcount > self.killcount

    # Reward the agent for getting a kill.
    if GOT_KILL:
        REWARD += 50

    # Punish the agent for spending ammo without getting kills.
    if SHOT and not GOT_KILL:
        REWARD -= 5

    if DAMAGED:
        REWARD -= (damage_taken - self.damage_taken) * 1

    REWARD += 0.1

    # Update game variables.
    self.killcount = killcount
    self.damage_taken = damage_taken

    return REWARD
