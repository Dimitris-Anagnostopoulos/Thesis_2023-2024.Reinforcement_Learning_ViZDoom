from Classes.ViZDoom_Gym import ViZDoom_Gym
import vizdoom as vzd


def basic(self: ViZDoom_Gym, game_variables: list) -> float:
    # Unpack the game variables.
    ammo, killcount = game_variables

    REWARD = 0

    FINISHED = self.game.is_episode_finished()
    SPENT_AMMO = ammo < self.previous_ammo
    GOT_KILL = killcount > self.killcount

    if GOT_KILL:
        REWARD += 10

    if SPENT_AMMO and not GOT_KILL:
        REWARD -= 1

    if FINISHED and not GOT_KILL:
        REWARD -= 5

    self.killcount = killcount
    self.previous_ammo = ammo

    return REWARD


def deadly_corridor(self: ViZDoom_Gym, game_variables: list) -> float:
    """
    Custom reward function partially generated by ChatGPT-4o.

    :return: Extra reward according to the coefficients.
    """
    # Unpack the game variables.
    health, killcount, hits_taken, armor, pos_x = game_variables

    # Initializations.
    REWARD = 0

    MOVED_CLOSER_TO_VEST = pos_x > self.X_position
    STAYED_IN_PLACE = pos_x == self.X_position
    TOOK_DAMAGE = hits_taken > self.hits_taken
    GOT_KILL = killcount > self.killcount
    GOT_ARMOR = armor > 0
    IS_DEAD = health <= 0

    # Get (+) reward when the agent moves closer to the vest.
    if MOVED_CLOSER_TO_VEST:
        REWARD += 50

    # Get (+) reward when the agent gets a kill.
    if GOT_KILL:
        REWARD += 50

    # Get (+) reward if the agent took no extra damage this step.
    if not TOOK_DAMAGE:
        REWARD += 5

    # Get (+) reward if the agent got the armor.
    if GOT_ARMOR:
        REWARD += 1000

    # Get (-) if the agent dies.
    if IS_DEAD:
        REWARD -= 50

    # Get (-) reward only when the agent gets hit.
    if TOOK_DAMAGE:
        REWARD -= 15

    # Get (-) reward only when the agent moves away from the vest.
    if not MOVED_CLOSER_TO_VEST:
        REWARD -= 50

    # Get (-) reward when the agent stays in place.
    if STAYED_IN_PLACE:
        REWARD -= 5

    # Get (-) reward per timestep.
    REWARD += 1

    # Update the values for the next step.
    self.killcount = killcount
    self.hits_taken = hits_taken
    self.X_position = pos_x

    return REWARD


def defend_the_center(self: ViZDoom_Gym, game_variables: list) -> float:
    # Unpack game variables.
    ammo, health, killcount, hits_taken = game_variables

    # Initial reward.
    REWARD = 0

    # Initialize useful variables.
    GOT_DAMAGED = hits_taken > self.prev_hits_taken
    GOT_KILL = killcount > self.prev_killcount
    SPENT_AMMO = ammo < self.prev_ammo
    IS_DEAD = health <= 0

    # Reward the agent for getting kills.
    if GOT_KILL:
        REWARD += 200

    # Punish the agent for wasting ammo.
    if SPENT_AMMO and not GOT_KILL:
        REWARD -= 50

    # Punish the agent for getting damaged.
    if GOT_DAMAGED:
        REWARD -= 10

    # Punish the agent for dying.
    if IS_DEAD:
        REWARD -= 1000

    # Update variables.
    self.prev_hits_taken = hits_taken
    self.prev_killcount = killcount
    self.prev_ammo = ammo

    return REWARD


def defend_the_line(self: ViZDoom_Gym, game_variables: list):
    # Unpack the game variables.
    ammo, health, killcount, damage_taken, angle = game_variables

    # Initialize the Reward.
    REWARD = 0

    # Initialize useful variables.
    FRANTIC_LOOK = abs(angle - self.previous_camera_angle) > 20
    SHOT = self.game.get_button(vzd.ATTACK) == 1
    DAMAGED = damage_taken > self.damage_taken
    GOT_KILL = killcount > self.killcount

    # Reward the agent for getting a kill.
    if GOT_KILL:
        REWARD += 20

    # Punish the agent for spending ammo without getting kills.
    if SHOT and not GOT_KILL:
        REWARD -= 1

    if DAMAGED:
        REWARD -= (damage_taken - self.damage_taken) * 0.3

    if FRANTIC_LOOK:
        REWARD -= 1

    REWARD += 0.1

    # Update game variables.
    self.killcount = killcount
    self.damage_taken = damage_taken

    return REWARD
